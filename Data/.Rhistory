hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
## 2. explore the data
dim(hd) ## 195 rows * 8 columns
str(hd) ## 195 obs. of  8 variables
dim(gii) ## 195 rows * 10 columns
str(gii) ## 195 obs. of  10 variables
## 3. rename the variables
colnames(hd) <- c('HDIrank','Country','HDI','FEB','EYE','MYE','GNI','GNIrank_Minus_HDIrank')
colnames(gii) <- c('HDIrank','Country','GII','MMR','ABR','PRP','PSEFemale','PSEMale','LFPRFemale','LFPRMale')
## 4. mutate gii with two new variables
gii <- mutate(gii,edu_ratio=gii$PSEFemale/gii$PSEMale)
gii <- mutate(gii,lab_ratio=gii$LFPRFemale/gii$LFPRMale)
dim(gii)
## 5. join two datasets with `Country`
human <- inner_join(hd, gii, by = 'Country', suffix=c(".hd",".gii"))
dim(human) ## 195 rows * 19 columns
head(human)
## write the data in a file
data_path <- "/Users/qingli/Documents/GitHub/IODS-project/Data/"
human_data <- paste (data_path,"Human_data_w4.csv",sep="/")
#write.csv(human,human_data,row.names = FALSE)
## Contine the data wrangling for Week5 exercise
## read the human data
human <- read.csv(human_data)
head(human,2)
## explore the dim and structure of `human`
dim(human)
str(human)
colnames(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
colnames(hd)
colnames('gii')
colnames(gii)
kept_var %in% colnames(human)
## week5.2
## exclude unneeded variables == select those are needed
kept_var <- c('Country','edu_ratio','lab_ratio','EYE','FEB','GNI','MMR','ABR','PRP')
kept_var %in% colnames(human)
sum(kept_var %in% colnames(human))
colnames(human)  %in% kept_var
sum(colnames(human)  %in% kept_var)
dim(human_selected)
logical_indices_kept_var <- (colnames(human)  %in% kept_var)
human_selected <- human[,logical_indices_kept_var]
dim(human_selected)
colnames(human_selected)
## change the variable names to what have been used in the instructions
colnames(human_selected) < -c('Country','Life.Exp','Edu.Exp','GNI','Mat.Mor','Ado.Birth','Parli.F','Edu2.FM','Labo.FM')
colnames(human_selected)
colnames(human_selected)
## change the variable names to what have been used in the instructions
colnames(human_selected) <- c('Country','Life.Exp','Edu.Exp','GNI','Mat.Mor','Ado.Birth','Parli.F','Edu2.FM','Labo.FM')
colnames(human_selected)
## week5.3
## remove missing value columns
human_selected <- filter(human_selected, complete.cases(human_selected))
dim(human_selected)
## week5.4
human_selcted$Coutry
## week5.4
human_selected$Coutry
## week5.4
human_selected$Country
nrow(human_selected)
reselected_nrow <- nrow(human_selected)-7
human_selected <- human_selected[1:reselected_nrow,]
dim(human_selected)
dim(human_selected) ##
## exclude the first column
human_selected <- human_selected[,2:ncol(human_selected)]
dim(human_selected) ##
## write the 'human_selected' to the local human_data file
human_data
human_data_new <- paste(data_path,"Human_data_w5.csv",sep="/")
write.csv(human_selected,human_data_new,row.names = TRUE)
human_data_new <- paste(data_path,"Human_data_w5.csv",sep="/")
write.csv(human_selected,human_data_new)
human_data_new <- paste(data_path,"Human_data_w5.csv",sep="/")
write.table(human_selected,human_data_new,row.names = TRUE,sep=',')
row.names(human_selected)
human <- read.csv(human_data)
## explore the dim and structure of `human`
dim(human) ## 195 observations on 19 features
str(human) ##195 obs. of  19 variables
## week5.1
## mutate GNI to a numerica GNI
new_GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
## Mutate the column value by directly give the new vector `new_GNI` to the `human`
human$GNI <- new_GNI
## week5.2
## exclude unneeded variables == select those are needed
## based on the instructions, I have selected the corresponding names used in this script.
kept_var <- c('Country','edu_ratio','lab_ratio','EYE','FEB','GNI','MMR','ABR','PRP')
## create a logical indices for the selected columns and pick them out & give the result to `human_selected`
logical_indices_kept_var <- (colnames(human)  %in% kept_var)
human_selected <- human[,logical_indices_kept_var]
## dim of `human_selected`
dim(human_selected) ## 195 obs. of 9 variables
## change the variable names to what have been used in the instructions
colnames(human_selected) <- c('Country','Life.Exp','Edu.Exp','GNI','Mat.Mor','Ado.Birth','Parli.F','Edu2.FM','Labo.FM')
colnames(human_selected)
## week5.3
## remove missing value columns
human_selected <- filter(human_selected, complete.cases(human_selected))
dim(human_selected) ## 162 obs. of 9 variables
## week5.4
## remove observations which are from regions (the last 7 obs) instead of from countries
reselected_nrow <- nrow(human_selected)-7
human_selected <- human_selected[1:reselected_nrow,]
dim(human_selected) ## 155 obs. of 9 varibles
## week5.5
## assign the country to row.names of the `human_selected`
row.names(human_selected) <- human_selected$Country
## exclude the first column
human_selected <- human_selected[,2:ncol(human_selected)]
dim(human_selected) ## 155 obs. of 8 variables
## write the 'human_selected' to the local human_data file
human_data_new <- paste(data_path,"Human_data_w5.csv",sep="/")
row.names(human_selected)
write.csv(human_selected,human_data_new,row.names = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally)
data<-"/Users/qingli/Documents/GitHub/IODS-project/Data/Human_data_w5.csv"
human <- read.csv(data)
head(human)
human <- read.csv(data,row.names = TRUE)
dim(human)
human <- read.csv(data,row.names = 1)
head(human)
dim(human)
corrplot(human, type = 'upper', method="circle",cl.pos = "b",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
library(corrplot)
library(MASS)
corrplot(human, type = 'upper', method="circle",cl.pos = "b",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
install.packages("corrplot")
library(corrplot)
corrplot(human, type = 'upper', method="circle",cl.pos = "b",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
corrplot(human, type = 'upper', method="circle",cl.pos = "b",tl.pos='d',
tl.cex=0.6)
View(human)
View(human)
class(human)
cor_matrix<-cor(human)
# print the correlation matrix
cor_matrix %>% round(2)
cor_matrix <- cor_matrix %>% round(2)
corrplot(cor_matrix, type = 'upper', method="circle",cl.pos = "b",tl.pos='d',
tl.cex=0.6)
cor_matrix <- cor_matrix %>% round(2)
corrplot(cor_matrix, type = 'upper', method="circle",cl.pos = "b",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
corrplot(cor_matrix, type = 'upper', method="circle",
tl.cex=0.6,order="hclust",
addCoef.col = "black")
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
corrplot(cor_matrix, method='color',type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
corrplot(cor_matrix, method='colour',type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust",
addCoef.col = "black")
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust", addCoef.col = "black",diag=FALSE)
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust", addCoef.col = "black")
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust", addCoef.col = "black",diag=FALSE)
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust", addCoef.col = "black",diag=FALSE)
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.6,order="hclust", addCoef.col = "black")
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.7, addCoef.col = "black")
corrplot(cor_matrix, type = 'upper', method="circle",tl.pos='d',
tl.cex=0.7, addCoef.col = "black",diag=FALSE)
corrplot(cor_matrix, type = 'upper', tl.pos='d',
tl.cex=0.7, addCoef.col = "black",diag=FALSE)
corrplot(cor_matrix,method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE)
corrplot(cor_matrix,method="color",
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE)
corrplot(cor_matrix,method="color",
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
# hide correlation coefficient on the principal diagonal
diag=FALSE)
corrplot(cor_matrix,method="circle",
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
# hide correlation coefficient on the principal diagonal
diag=FALSE)
data<-"/Users/qingli/Documents/GitHub/IODS-project/Data/Human_data_w5.csv"
human <- read.csv(data,row.names = 1)
head(human)
class(human)
dim(human) ## 155 observations with 8 fearures
head(human,1)
gathered_human <- gather(human)
head(gathered_human)
ggplot(gathered_human, aes(value, ..count..)) +
geom_histogram( binwidth=.2) +
geom_freqpoly(colour="black", binwidth=.2) +
facet_wrap(~key)
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..),
breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2) +
geom_density(col=2) +
labs(title=..................., x=....., y=.......)
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..),
breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..),
breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2) +
geom_density(col=2)
ggplot(data=gathered_human, aes(value)) +
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..)), col="red",  fill="green", alpha=0.2) +
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..), col="red",  fill="green", alpha=0.2) +
geom_density()
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..), col="red",  fill="green", alpha=0.2) +
geom_density()+facet_wrap(~key)
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..), col="red",  fill="green", alpha=0.2,binwidth = 2) +
geom_density()+facet_wrap(~key)
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..), col="red",  fill="green", alpha=0.2,binwidth = 20) +
geom_density()+facet_wrap(~key)
ggplot(data=gathered_human, aes(value)) +
geom_histogram(aes(y =..density..), col="red",  fill="green", alpha=0.2,binwidth = 5) +
geom_density()+facet_wrap(~key)
ggpairs(human, mapping = aes(col='tomato',alpha=0.05),
lower = list(combo =wrap("facethist", bins = 30)),
upper = list(continuous = wrap("cor", size = 2.5)))
ggpairs(human, mapping = aes(col='tomato',alpha=0.05),
lower = list(combo =wrap("facethist", bins = 30)))
ggpairs(human, mapping = aes(col='tomato',alpha=0.05),
lower = list(combo =wrap("facethist", bins = 30)))
ggpairs(human, mapping = aes(col='royalblue',alpha=0.05),
lower = list(combo =wrap("facethist", bins = 30)),
upper = list(continuous = wrap("cor", size = 2.5)))
pca_unscaled_human <- prcomp(human)
summary(pca_unscaled_human)
pca_unscaled_human
summary(pca_unscaled_human)
summary(pca_unscaled_human)
summary(human)
glimpse(human)
summary(human)
summary(pca_unscaled_human)
biplot(pca_unscaled_human, choices = 1:2,cex = c(0.8, 1),col = c("grey40", "deeppink2"))
biplot(pca_unscaled_human, choices = 1:2,cex = c(0.8, 1),col = c("grey40", "deeppink2"))
biplot(pca_unscaled_human, choices = 1:2,cex = c(0.8, 0.9),col = c("grey40", "deeppink2"))
biplot(pca_unscaled_human, choices = 1:2,cex = c(0.8, 0.8),col = c("grey40", "deeppink2"))
summary(human)
var(human)
var(human[,1:8])
summary(human)
scaled_human <- scale(human)
pca_scaled_human <- prcomp(scaled_human)
summary(pca_scaled_human)
biplot(pca_scaled_human, choices = 1:2,cex = c(0.8, 0.8),col = c("grey40", "deeppink2"))
biplot(pca_scaled_human, choices = 1:2,cex = c(0.8, 0.6),col = c("grey40", "deeppink2"))
library(FactoMineR)
install.packages('FactoMineR')
library(FactoMineR)
tea
olnames(tea)
colnames(tea)
load(tea)
colnames(tea)
data(tea)
colnames(tea)
dim(tea)
summary(tea)
str(tea)
gather(tea_time) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))+ geom_bar()
gather(tea) %>% head(100) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% dim()
gather(tea) %>% class()
gather(tea) %>% dim()
gather(tea) %>% head(1000) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% head(5000) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% head(2500) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% head(2500) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(4000) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(4500) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(4800) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(4900) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(4950) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(4990) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(5000) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% head(6000) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% subset(select = -age ) %>%  dim()
subset(tea, select = -age ) %>% gather() %>%  dim()
subset(tea, select = -age ) %>% gather() %>% head(6000) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free")
subset(tea, select = -age ) %>% gather() %>% head(6000) %>% ggplot(aes(value))+geom_bar() + facet_wrap("key", scales = "free") +theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
summary(mca)
mca <- MCA(tea, graph = FALSE)
tea_new <- subset(tea, select = -age )
mca <- MCA(tea_new, graph = FALSE)
summary(mca)
plot(mca, invisible=c("ind"),habillage = "quali")
kept <- c('How', 'effect.on.health', 'home','price','breakfast', 'escape.exoticism')
tea_subset <- subset(tea, select = one_of(kept) )
kept <- c('How', 'effect.on.health', 'home','price','breakfast', 'escape.exoticism')
tea_subset <- select(tea, one_of(kept) )
mca <- MCA(tea_subset, graph = FALSE)
summary(mca)
plot(mca, invisible=c("ind"),habillage = "quali")
kept <- c('How', 'effect.on.health', 'home','price','breakfast', 'sugar')
tea_subset <- select(tea, one_of(kept) )
mca <- MCA(tea_subset, graph = FALSE)
summary(mca)
plot(mca, invisible=c("ind"),habillage = "quali")
kept <- c('How', 'Sport','breakfast','lunch','dinner','friends','sex','pub','home','tea.time','swimming')
tea_subset <- select(tea, one_of(kept) )
mca <- MCA(tea_subset, graph = FALSE)
summary(mca)
kept <- c('How', 'Sport','breakfast','lunch','dinner','friends','sex','pub','home','tea.time','frequency')
tea_subset <- select(tea, one_of(kept) )
mca <- MCA(tea_subset, graph = FALSE)
summary(mca)
plot(mca, invisible=c("ind"),habillage = "quali")
plot(mca, invisible=c("ind"),habillage = "ind")
plot(mca, invisible=c("ind"),habillage = "quali")
plot(mca, invisible=c("var"))
plot(mca, invisible=c("ind"),habillage = "quali")
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
head(BPRS)
str(BPRS)
BPRS$subject <- factor(BPRS$subject)
BPRS$treatment <- factor(BPRS$treatment)
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
BPRS$subject <- factor(BPRS$subject)
BPRS$treatment <- factor(BPRS$treatment)
str(BPRS)
colnames(BPRS)
## convert the wide form of BPRS to long form.
BPRS %>% group_by(treatment, subject)
## convert the wide form of BPRS to long form.
BPRSL <- BPRS %>% group_by(treatment, subject) %>% gather(key=weeks,value=bprs) %>% ungroup()
head(BPRSL)
## convert the wide form of BPRS to long form.
BPRSL <- BPRS %>% group_by(treatment, subject) %>% gather(key=weeks,value=bprs,-treatment, -subject) %>% ungroup()
head(BPRSL)
BPRSL <- mutate(week=substr(BPRSL$weeks,5,6))
BPRSL <- mutate(BPRSL,week=substr(BPRSL$weeks,5,6))
head(BPRSL)
BPRSL <- as.numeric(mutate(BPRSL,week=substr(BPRSL$weeks,5,6)))
## convert the wide form of BPRS to long form.
BPRSL <- BPRS %>% group_by(treatment, subject) %>% gather(key=weeks,value=bprs,-treatment, -subject) %>% ungroup()
BPRSL <- as.numeric(mutate(BPRSL,week=substr(BPRSL$weeks,5,6)))
BPRSL <- mutate(BPRSL,week=as.numeric(substr(BPRSL$weeks,5,6)))
head(BPRSL)
dim(BPRSL)
## BPRS is the wide form of the data.
dim(BPRS)
colnames(BPRS) ## BPRS scores have been measured for 20 sujects in two treatment groups over 9 time points, from week0 to week8.
## The data structure of long form of BPRS, which named BPRSL here.
str(BPRSL) ## BPRSL
## The data structure of long form of BPRS, which named BPRSL here.
dim(BPRSL)
str(BPRSL) ## BPRSL has 5 columns, the treatment and subject haven't changed. But we gathered the 9 time points data from 40 rows of BPRS to 360 columns of BPRSL, 9*40=360.
data_path <- "/Users/qingli/Documents/GitHub/IODS-project/Data/"
write.csv(BPRS,paste(data_path,"BPRS.csv"), row.names = FALSE)
write.csv(BPRSL,paste(data_path,"BPRSL.csv"), row.names = FALSE)
## RATS data preprocessing
RATS <- read.table(https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt)
## RATS data preprocessing
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep  =" ", header = T)
head (RATS)
## RATS data preprocessing
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep  ="\t", header = T)
head (RATS)
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
head(BPRS)
head (RATS)
dim(RATS)
dim(RATS)
RATSL <- BPRS %>% group_by(ID, Group) %>% gather(key=WD,value=weight,-ID, -Group) %>% ungroup()
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep  ="\t", header = T)
## change the cetegorical variables to factor
RATS$ID <- factor(RATS$ID)
RATS$Group <- factor(RATS$Group)
RATSL <- BPRS %>% group_by(ID, Group) %>% gather(key=WD,value=weight,-ID, -Group) %>% ungroup()
RATSL <- RATS %>% group_by(ID, Group) %>% gather(key=WD,value=weight,-ID, -Group) %>% ungroup()
RATSL <- mutate(RATSL,time=substr(RATSL$WD,3,4))
dim (RATSL)
head (RATSL)
11*16
RATSL <- RATS %>% group_by(ID, Group) %>% gather(key=WD,value=weight,-ID, -Group) %>% ungroup()
RATSL <- mutate(RATSL,time=as.substr(RATSL$WD,3,4))
dim (RATSL) ## 176 rows * 5columns
head (RATSL) ## the head of the data here shows the weights from the first six rats in group 1 at time point 1.
## The RATSL is the long form of RATS. We kept 'ID' & 'Group' in our long form data, and gathered the set of 11 weights from row display to column display. So we have 11*16=176 columns.
## write RATS & RATSL to the local data folder
write.csv(RATS,paste(data_path,"RATS.csv"), row.names = FALSE)
write.csv(RATSL,paste(data_path,"RATSL.csv"), row.names = FALSE)
data_path <- "/Users/qingli/Documents/GitHub/IODS-project/Data/"
BPRS <- read.csv(paste(data_path,"BPRS.csv"))
BPRSL <- read.csv(paste(data_path,"BPRSL.csv"))
head(BPRS)
head(BPRSL)
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(FactoMineR)
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line()
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4))
BPRSL$week <- as.integer(BPRSL$week)
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
BPRSL$week <- as.integer(BPRSL$week)
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
head(BPRSL)
str(BPRSL)
data_path <- "/Users/qingli/Documents/GitHub/IODS-project/Data/"
BPRS <- read.csv(paste(data_path,"BPRS.csv"))
BPRSL <- read.csv(paste(data_path,"BPRSL.csv"))
BPRS$treatment <- as.factor(BPRS$treatment)
BPRS$subject<- as.factor(BPRS$subject)
BPRSL$treatment <- as.factor(BPRSL$treatment)
BPRSL$subject<- as.factor(BPRSL$subject)
head(BPRS)
dim(BPRS)
head(BPRSL)
str(BPRSL)
dim(BPRSL)
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs))) + theme_minimal()
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +  theme_minimal() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
